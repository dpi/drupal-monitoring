<?php
/**
 * @file
 * Monitoring base install file.
 */

use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\monitoring\Entity\SensorConfig;
use Drupal\node\Entity\NodeType;
use Drupal\search_api\Entity\Index;

/*
 * Implements hook_install().
 *
 * Declares initial set of sensors.
 */
function monitoring_install() {

  // Declares initial set of NodeType sensors (if module exists).
  if (\Drupal::moduleHandler()->moduleExists('node')) {
    foreach (NodeType::loadMultiple() as $node_type) {
      $sensor = SensorConfig::create(array(
        'id' => 'node_new_' . $node_type->id(),
        'label' => SafeMarkup::format('New @type nodes', array('@type' => $node_type->label())),
        'description' => SafeMarkup::format('New nodes of type @type', array('@type' => $node_type->label())),
        'plugin_id' => 'entity_aggregator',
        'value_label' => SafeMarkup::format('@type nodes', array('@type' => $node_type->label())),
        'value_type' => 'number',
        'category' => 'Content',
        'status' => TRUE,
        'caching_time' => 600,
        'settings' => array(
          'entity_type' => 'node',
          'conditions' => array(
            array('field' => 'type', 'value' => $node_type->id()),
          ),
          'time_interval_field' => 'created',
          'time_interval_value' => 60 * 60 * 24,
        ),
        'dependencies' => array('module' => 'node'),
      ));
      $sensor->save();
    }
  }

  // Declares initial set of search api sensors (if module exists).
  if (\Drupal::moduleHandler()->moduleExists('search_api')) {
    foreach (Index::loadMultiple() as $index) {
      $sensor = SensorConfig::create(array(
        'id' => 'search_api_' . $index->id(),
        'label' => SafeMarkup::format('Search index queue size of @index', array('@index' => $index->label())),
        'plugin_id' => 'search_api_unindexed',
        'value_type' => 'number',
        'value_label' => 'Unindexed items',
        'category' => 'Search API',
        // Cache for 15 minutes.
        'caching_time' => 900,
        'status' => TRUE,
        'settings' => array(
          'index_id' => $index->id(),
        ),
        'dependencies' => array('module' => 'search_api'),
      ));
      $sensor->save();
    }
  }

  // Declares core requirements sensors.
  // Load .install files
  include_once DRUPAL_ROOT . '/core/includes/install.inc';
  drupal_load_updates();

  foreach (\Drupal::moduleHandler()->getImplementations('requirements') as $module) {
    // Skip update module as there is a separate sensors for core and contrib.
    if ($module == 'update') {
      continue;
    }
    $sensor = SensorConfig::create(array(
      'id' => 'core_requirements_' . $module,
      'label' => SafeMarkup::format('Module @module', array('@module' => $module)),
      'description' => SafeMarkup::format('Requirements of the @module module', array('@module' => $module)),
      'plugin_id' => 'core_requirements',
      'value_type' => 'no_value',
      'category' => 'Requirements',
      'caching_time' => 3600,
      'status' => TRUE,
      'settings' => array(
        'module' => $module,
        // List requirements keys which reports will be suppressed.
        'exclude_keys' => array(),
      ),
      'dependencies' => array('module' => $module),
    ));
    // Ignore the cron key for system requirements, as we have a separate
    // sensor for this.
    if ($module == 'system') {
      $sensor->settings['exclude_keys'][] = 'cron';
    }
    $sensor->save();
  }
}

/**
 * Maps severities to their machine names.
 *
 * @return array
 *   Severity names array keyed by RfcLogLevel constants.
 */
function monitoring_event_severities() {
  return array(
    RfcLogLevel::DEBUG => 'debug',
    RfcLogLevel::INFO => 'info',
    RfcLogLevel::NOTICE => 'notice',
    RfcLogLevel::WARNING => 'warning',
    RfcLogLevel::ERROR => 'error',
    RfcLogLevel::EMERGENCY => 'emergency',
    RfcLogLevel::ALERT => 'alert',
    RfcLogLevel::CRITICAL => 'critical',
  );
}
