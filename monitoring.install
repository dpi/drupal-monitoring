<?php
/**
 * @file
 * Monitoring base install file.
 */

use Drupal\Component\Utility\String;
use Drupal\monitoring\Entity\SensorInfo;
use Drupal\node\Entity\NodeType;
use Drupal\search_api\Entity\Index;

/*
 * Implements hook_install().
 *
 * Declares initial set of sensors.
 */
function monitoring_install() {

  // Declares initial set of NodeType sensors.
  foreach (NodeType::loadMultiple() as $node_type) {
    $sensor = SensorInfo::create(array(
      'id' => 'node_new_' . $node_type->type,
      'label' => String::format('New @type nodes', array('@type' => $node_type->name)),
      'description' => String::format('New nodes of type @type', array('@type' => $node_type->name)),
      'sensor_id' => 'database_aggregator',
      'value_label' => String::format('@type nodes', array('@type' => $node_type->name)),
      'category' => 'Content',
      'status' => TRUE,
      'caching_time' => 600,
      'settings' => array(
        'thresholds' => array(
          'type' => 'falls',
        ),
        'table' => 'node_field_data',
        'conditions' => array(
          array('field' => 'type', 'value' => $node_type->type),
        ),
        'time_interval_field' => 'created',
        'time_interval_value' => 60 * 60 * 24,
      ),
    ));
    $sensor->save();
  }

  // Declares initial set of search api sensors (if module exists).
  if (\Drupal::moduleHandler()->moduleExists('search_api')) {
    foreach (Index::loadMultiple() as $index) {
      $sensor = SensorInfo::create(array(
        'id' => 'search_api_' . $index->machine_name,
        'label' => String::format('Search index queue size of @index', array('@index' => $index->name)),
        'sensor_id' => 'search_api_unindexed',
        'value_label' => 'Unindexed items',
        'category' => 'Search API',
        // Cache for 15 minutes.
        'caching_time' => 900,
        'status' => TRUE,
        'settings' => array(
          'index_id' => $index->id(),
        ),
      ));
      $sensor->save();
    }
  }

  // Declares Watchdog events sensors.
  $severities = monitoring_event_severities();
  foreach (watchdog_severity_levels() as $level => $name) {
    if ($level <= WATCHDOG_ERROR) {
      $caching_time = 300;
      $critical_threshold = 5;
      $warning_threshold = 1;
    }
    elseif (!in_array($level, array(WATCHDOG_NOTICE, WATCHDOG_INFO))) {
      $caching_time = 900;
      $critical_threshold = 50;
      $warning_threshold = 20;
    }
    // Disable notice and info levels by default.
    else {
      $caching_time = 900;
      $critical_threshold = NULL;
      $warning_threshold = NULL;
    }
    $sensor = SensorInfo::create(array(
      'id' => 'dblog_event_severity_' . $severities[$level],
      'label' => String::format('Severity @severity', array('@severity' => $name)),
      'description' => String::format('Watchdog entries of severity @severity',array('@severity' => $name)),
      'sensor_id' => 'database_aggregator',
      'value_label' => 'Events',
      'category' => 'Watchdog',
      'caching_time' => $caching_time,
      'status' => TRUE,
      'settings' => array(
        'thresholds' => array(
          'type' => 'exceeds',
          'warning' => $warning_threshold,
          'critical' => $critical_threshold,
        ),
        'table' => 'watchdog',
        'conditions' => array(
          array('field' => 'severity', 'value' => $level),
        ),
        'time_interval_field' => 'timestamp',
        'time_interval_value' => 86400,
      ),
    ));
    $sensor->save();
  }

  // Declares sensor for missing image style
  if (\Drupal::moduleHandler()->moduleExists('image')) {
    $sensor = SensorInfo::create(array(
      'id' => 'dblog_image_missing_style',
      'label' => 'Image derivative creation fail',
      'description' => 'Image derivative creation fails',
      'sensor_id' => 'image_style_missing',
      'value_label' => 'Watchdog entries',
      'category' => 'Watchdog',
      'caching_time' => 3600,
      'status' => TRUE,
      'settings' => array(
        'thresholds' => array(
          'type' => 'exceeds',
          'warning' => 5,
          'critical' => 20,
        ),
        'table' => 'watchdog',
        'conditions' => array(
          array('field' => 'type', 'value' => 'image'),
          array('field' => 'message', 'value' => 'Source image at %source_image_path not found while trying to generate derivative image at %derivative_path.'),
        ),
        'time_interval_field' => 'timestamp',
        'time_interval_value' => 60 * 60 * 24,
      ),
    ));
    $sensor->save();
  }

  // @todo - uncomment this section after past module is ready for 8.x
  // Declares Past events sensors.
  $severities = monitoring_event_severities();
  foreach (past_event_severities() as $severity => $name) {
    $sensor = SensorInfo::create(array(
      'id' => 'past_db_event_severity_' . $severities[$severity],
      'label' => String::format('Severity @severity', array('@severity' => $name)),
      'description' => String::format('Past events with severity @severity',array('@severity' => $name)),
      'sensor_id' => 'database_aggregator',
      'value_label' => 'Events',
      'category' => 'Past',
      'caching_time' => 3600,
      'status' => TRUE,
      'settings' => array(
        'table' => 'past_event',
        'conditions' => array(
          array('field' => 'severity', 'value' => $severity),
        ),
        'time_interval_field' => 'timestamp',
        'time_interval_value' => 86400,
      ),
    ));
    $sensor->save();
  }
  $sensor = SensorInfo::load('past_db_event_severity_' . $severities[PAST_SEVERITY_CRITICAL]);
  $sensor->settings['thresholds'] = array(
    'type' => 'exceeds',
    'warning' => 5,
    'critical' => 1,
  );
  $sensor->save();

  // Declares elysia cron sensors
  $result = db_select('elysia_cron', 'e')->fields('e', array('name'))->execute()->fetchAll();

  foreach ($result as $row) {
    // Remove the colon from the name as it breaks munin graphs.
    $name = str_replace(':', '', $row->name);
    $sensor = SensorInfo::create(array(
      'id' => 'elysia_cron_' . $name . '_last_execution',
      'label' => String::format('Elysia @name execution', array('@name' => $row->name)),
      'description' => String::format('Last execution duration for elysia @name cron', array('@name' => $row->name)),
      'sensor_id' => 'elysia_cron',
      'value_type' => 'time_interval',
      'category' => 'Elysia Cron',
      'status' => FALSE,
      'settings' => array(
        'name' => $row->name,
        'metric' => 'last_execution_time',
      ),
    ));
    $sensor->save();

    $sensor = SensorInfo::create(array(
      'id' => 'elysia_cron_' . $name . '_last_run',
      'label' => String::format('Elysia @name run', array('@name' => $row->name)),
      'description' => String::format('Time since last elysia @name run', array('@name' => $row->name)),
      'sensor_id' => 'elysia_cron',
      'value_type' => 'time_interval',
      'category' => 'Elysia Cron',
      'status' => FALSE,
      'settings' => array(
        'name' => $row->name,
        'metric' => 'last_run',
      ),
    ));
    $sensor->save();
  }

  //Declares commerce order status sensors.
  foreach (commerce_order_statuses() as $status_name => $status_info) {
    $sensor = SensorInfo::create(array(
      'id' => 'commerce_order_status_' . $status_name,
      'label' => String::format('Orders in status @name', array('@name' => $status_info['title'])),
      'sensor_id' => 'database_aggregator',
      'value_label' => 'Orders',
      'status' => FALSE,
      'category' => 'Commerce',
      'caching_time' => 3600,
      'settings' => array(
        'entity_type' => 'commerce_order',
        'conditions' => array(
          array('field' => 'status', 'value' => $status_name),
        ),
        'time_interval_field' => 'created',
        'time_interval_value' => 60 * 60 * 24,
      ),
    ));
    $sensor->save();
  }

  $currencies = commerce_currencies(TRUE);
  foreach ($currencies as $currency) {
    $sensor = SensorInfo::create(array(
      'id' => 'commerce_order_turnover_' . strtolower($currency['code']),
      'label' => String::format('Turnover in @currency', array('@currency' => $currency['code'])),
      'description' => String::format('Turnover from completed orders in @currency', array('@currency' => $currency['code'])),
      'sensor_id' => 'commerce_turnover',
      'value_label' => $currency['code'],
      'value_type' => 'commerce_currency',
      'category' => 'Commerce',
      'caching_time' => 3600,
      'settings' => array(
        'table' => 'commerce_order',
        'conditions' => array(
          'status' => array(
            'field' => 'status',
            'value' => array('pending'),
            'operator' => 'IN',
            ),
        ),
      'time_interval_field' => 'created',
      'time_interval_value' => 60 * 60 * 24,
      'currency_code' => $currency['code'],
      ),
    ));
    $sensor->save();
  }
  if (count($currencies) > 1) {
    $sensor = SensorInfo::create(array(
      'id' => 'commerce_order_turnover_total',
      'label' => 'Total turnover',
      'description' => 'Total turnover from completed orders in all currencies',
      'sensor_id' => 'commerce_turnover',
      'value_label' => $currencies[commerce_default_currency()]['code'],
      'value_type' => 'commerce_currency',
      'category' => 'Commerce',
      'caching_time' => 3600,
      'status' => TRUE,
      'settings' => array(
        'table' => 'commerce_order',
        'conditions' => array(
          'status' => array(
            'field' => 'status',
            'value' => array('pending'),
            'operator' => 'IN',
          ),
        ),
        'time_interval_field' => 'created',
        'time_interval_value' => 60 * 60 * 24,
      ),
    ));
  }
}

/**
 * Maps severities to their machine names.
 *
 * @return array
 *   Severity names array keyed by WATCHDOG_* constants.
 */
function monitoring_event_severities() {
  return array(
    WATCHDOG_DEBUG => 'debug',
    WATCHDOG_INFO => 'info',
    WATCHDOG_NOTICE => 'notice',
    WATCHDOG_WARNING => 'warning',
    WATCHDOG_ERROR => 'error',
    WATCHDOG_EMERGENCY => 'emergency',
    WATCHDOG_ALERT => 'alert',
    WATCHDOG_CRITICAL => 'critical',
  );
}
